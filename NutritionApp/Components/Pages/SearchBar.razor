@using System.Timers;

<FluentSearch @ref=searchTest @bind-Value="Value" @bind-Value:after="HandleClear"
    @oninput="@(e => Value = e.Value?.ToString())" Label="@Label" Placeholder="@Placeholder" />
<br />
<FluentListbox aria-label="search results" Items=@searchResults TOption="string"
    SelectedOptionChanged="OnOptionChanged" />

@code {
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public List<string> SearchData { get; set; } = [];
    [Parameter] public string DefaultValue { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ItemSelected { get; set; }

    private Timer? timer = null;
    private FluentSearch? searchTest;
    private string? _value = string.Empty;
    private string? Value
    {
        get => _value;
        set
        {
            if (value != _value)
            {
                _value = value;
                DisposeTimer();
                //ShowMessageBar the debounce time in ms to the timer below
                timer = new Timer(400);
                timer.Elapsed += TimerElapsed_TickAsync;
                timer.Enabled = true;
                timer.Start();
            }
        }
    }
    List<string> searchResults = DefaultResults;
    static string defaultResultsText = "no results";
    static List<string> DefaultResults => new() { defaultResultsText };

    protected override void OnInitialized()
    {
        Value = DefaultValue;
    }

    private async void TimerElapsed_TickAsync(object? sender, EventArgs e)
    {
        DisposeTimer();
        await InvokeAsync(OnSearch);
    }

    private void DisposeTimer()
    {
        if (timer != null)
        {
            timer.Enabled = false;
            timer.Elapsed -= TimerElapsed_TickAsync;
            timer.Dispose();
            timer = null;
        }
    }

    private void OnSearch()
    {
        if (!string.IsNullOrWhiteSpace(Value))
        {
            string searchTerm = Value.ToLower();

            //You can also call an API here if the list is not local
            List<string> temp = SearchData.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
            if (temp.Count() > 0)
            {
                searchResults = temp;
            }
            else
            {
                searchResults = DefaultResults;
            }
            StateHasChanged();
        }
        else
        {
            searchResults = DefaultResults;
            StateHasChanged();
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(Value))
            return;

        DisposeTimer();
        searchResults = DefaultResults;
        Value = string.Empty;
        StateHasChanged();
    }

    private async Task OnOptionChanged(string e)
    {
        Value = (e != defaultResultsText ? e : string.Empty);
        await ItemSelected.InvokeAsync(e);
    }
}
