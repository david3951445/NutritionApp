@page "/samples/list"
@using SampleDatabaseBuilder.Services
@using Microsoft.EntityFrameworkCore
@using NutritionApp.Services
@inject NavigationManager NavigationManager
@inject IDbContextFactory<SamplesContext> DbFactory
@inject SearchState State
@rendermode InteractiveServer

<h3>Sample List</h3>

<div>
    <label for="sampleName">樣品名稱：</label>
    <InputText id="sampleName" @bind-Value="State.SampleName" @onkeydown="HandleKeyDown" placeholder="請輸入樣品名稱..." />
</div>
<div>
    <label for="commonName">俗名：</label>
    <InputText id="commonName" @bind-Value="State.CommonName" @onkeydown="HandleKeyDown" placeholder="請輸入俗名..." />
</div>
<div>
    <label for="catagory">食品分類：</label>
    <InputText id="catagory" @bind-Value="State.Catagory" @onkeydown="HandleKeyDown" placeholder="請輸入食品分類..." />
</div>
<button @onclick="FetchData" disabled="@IsLoading">
    @(IsLoading ? "Searching..." : "Search")
</button>

@if (State.Samples.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>項次</th>
                <th>整合編號</th>
                <th>樣品名稱</th>
                <th>俗名</th>
                <th>樣品英文名稱</th>
                <th>內容物描述</th>
                <th>食品分類</th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < State.Samples.Count; i++)
            {
                var sample = State.Samples[i];
                <tr @onclick="() => ShowDetails(sample.Id)" style="cursor: pointer;">
                    <td>@i</td>
                    <td>@sample.Id</td>
                    <td>@sample.Name</td>
                    <td>@sample.CommonName</td>
                    <td>@sample.EnglishName</td>
                    <td>@sample.ContentDescription</td>
                    <td>@sample.FoodCatagory.Name</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No data available.</p>
}

@code {
    private int? Limit { get; set; } = 2;
    private bool IsLoading { get; set; }

    private async Task FetchData()
    {
        if (IsLoading)
            return;

        try
        {
            IsLoading = true;
            State.Samples = await GetSamplesFromDb();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task<List<Sample>> GetSamplesFromDb()
    {
        using var context = DbFactory.CreateDbContext();
        return await context.Samples
        .Where(s => !string.IsNullOrEmpty(State.SampleName) && s.Name.Contains(State.SampleName)
        || !string.IsNullOrEmpty(State.Catagory) && s.FoodCatagory.Name.Contains(State.Catagory)
        || !string.IsNullOrEmpty(State.CommonName) && s.CommonName.Contains(State.CommonName))
        .Include(s => s.FoodCatagory)
        .ToListAsync();
    }

    private async Task<List<Sample>> GetSamplesFromHttp()
    {
        // Call the API using the generated API client
        using var httpClient = new HttpClient();
        var apiClient = new FdaNutritionDatabaseClient(httpClient);
        var response = await apiClient.ActivityGetAsync(
        method: Method.OpenData,
        infoId: InfoId._20,
        offset: null,
        limit: Limit,
        sort: Sort.整合編號,
        食品分類: State.Catagory,
        樣品名稱: State.SampleName,
        俗名: State.CommonName,
        樣品英文名稱: null,
        分析項分類: null,
        分析項: null
        );

        return SampleService.ConvertToSamples(response).ToList();
    }

    private void ShowDetails(string integrationId)
    {
        NavigationManager.NavigateTo($"/samples/details/{integrationId}");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await FetchData();
    }
}
