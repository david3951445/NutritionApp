@page "/samples/compare/{Id1}-{Id2}"
@using SampleDatabaseBuilder.Services
@using Microsoft.EntityFrameworkCore
@using NutritionApp.Services
@using NutritionApp.Components.Charting
@inject SampleService SampleService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (errorMessage != null)
{
    <h1>@errorMessage</h1>
    return;
}

@if (analysisItemsByCatagory.Any())
{
    @foreach (CategoryItem item in analysisItemsByCatagory)
    {
        <FluentCard MinimalStyle="true">
            <FluentGrid>
                <FluentGridItem xs="12">
                    <FluentLabel Typo="Typography.H2">@item.Category</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6">
                    <FluentDataGrid Items="@item.First.AsQueryable()" Style="width: 60%; table-layout: auto;">
                        <PropertyColumn Title="分析項名稱" Property="@(i => i.AnalysisItemInfo.Name)" />
                        <PropertyColumn Title="單位" Property="@(i => i.AnalysisItemInfo.Unit)" />
                        <PropertyColumn Title="每100g含量" Property="@(i => i.Value)" />
                    </FluentDataGrid>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6">
                    <FluentDataGrid Items="@item.Second.AsQueryable()" Style="width: 60%; table-layout: auto;">
                        <PropertyColumn Title="分析項名稱" Property="@(i => i.AnalysisItemInfo.Name)" />
                        <PropertyColumn Title="單位" Property="@(i => i.AnalysisItemInfo.Unit)" />
                        <PropertyColumn Title="每100g含量" Property="@(i => i.Value)" />
                    </FluentDataGrid>
                </FluentGridItem>
                <FluentGridItem xs="12">
                    <BarChart Labels="@item.First.Select(ai => ai.AnalysisItemInfo.Name)" DataSets="item.Datasets" Width="1000"
                        Height="1000" />
                </FluentGridItem>
            </FluentGrid>
        </FluentCard>
    }
}

@code {
    [Parameter] public string Id1 { get; set; }
    [Parameter] public string Id2 { get; set; }

    CategoryItem[] analysisItemsByCatagory = null!;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var sample1 = await SampleService.GetSampleAsync(Id1);
        if (sample1 == null)
        {
            errorMessage = "Sample 1 not found.";
            return;
        }
        var sample2 = await SampleService.GetSampleAsync(Id2);
        if (sample2 == null)
        {
            errorMessage = "Sample 2 not found.";
            return;
        }

        // Perform the left join
        analysisItemsByCatagory = (from cat1 in sample1.AnalysisItemsByCatagory
                                   join cat2 in sample2.AnalysisItemsByCatagory
                                   on cat1.Key equals cat2.Key into joinedGroup
                                   from cat2 in joinedGroup.DefaultIfEmpty()
                                   select new CategoryItem(
                                   Category: cat1.Key,
                                   First: cat1.Value,
                                   Second: cat2.Value,
                                   Datasets: new Dataset[]
                                   {
GetDatSet(sample1.Name, cat1.Value, "rgba(255, 99, 132, 0.5)"), // Semi-transparent red
GetDatSet(sample2.Name, cat2.Value,"rgba(54, 162, 235, 0.5)") // Semi-transparent blue
                                   })
        ).ToArray();
    }

    Dataset GetDatSet(string label, AnalysisItem[] data, string backgroundColor) => new Dataset
        {
            Label = label,
            BackgroundColor = backgroundColor,
            Data = data
        .Select(x => double.TryParse(x.Value, out var result) ? result : 0)
        .ToArray(),
        };

    record struct CategoryItem(string Category, AnalysisItem[] First, AnalysisItem[] Second, Dataset[] Datasets);
}