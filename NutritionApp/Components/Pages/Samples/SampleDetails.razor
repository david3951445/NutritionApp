@page "/samples/details/{Id}"
@using Microsoft.EntityFrameworkCore
@using SampleDatabaseBuilder.Services
@inject NavigationManager NavigationManager
@inject IDbContextFactory<SamplesContext> DbFactory
@rendermode InteractiveServer

<h1>樣品詳細資料</h1>
<FluentDivider></FluentDivider>

@if (Sample != null)
{
	<FluentStack Orientation="Orientation.Vertical">
		<FluentGrid Spacing="1">
			@foreach (var nameValue in NameValues)
			{
				<FluentGridItem xs="12" sm="6">
					<FluentCard MinimalStyle="true">
						<FluentLabel Typo="Typography.H2">@nameValue.Key</FluentLabel>
						<FluentLabel Typo="Typography.H4">@nameValue.Value</FluentLabel>
					</FluentCard>
				</FluentGridItem>
			}
		</FluentGrid>

		@if (CatagoryItems != null)
		{
			@foreach (var pair in CatagoryItems)
			{
				<FluentCard MinimalStyle="true">
					<FluentGrid>
						<FluentGridItem xs="12">
							<FluentLabel Typo="Typography.H2">@pair.Key</FluentLabel>
						</FluentGridItem>
						<FluentGridItem xs="12" sm="6">
							<FluentDataGrid Items="@pair.Value.AsQueryable()" Style="width: 60%; table-layout: auto;">
								<PropertyColumn Title="分析項名稱" Property="@(i => i.AnalysisItemInfo.Name)" />
								<PropertyColumn Title="單位" Property="@(i => i.AnalysisItemInfo.Unit)" />
								<PropertyColumn Title="每100g含量" Property="@(i => i.Value)" />
							</FluentDataGrid>
						</FluentGridItem>
						<FluentGridItem xs="12" sm="6" HiddenWhen="GridItemHidden.SmAndDown">
							@if (PieData[pair.Key].Any())
							{
								<PieChart Labels="PieData[pair.Key].Keys.ToList()" Data="PieData[pair.Key].Values.ToList()" />
							}
						</FluentGridItem>
					</FluentGrid>
				</FluentCard>
			}
		}
	</FluentStack>

	<button @onclick="GoBack">Go Back</button>
}

@code {
	[Parameter] public string? Id { get; set; }

	Sample? Sample { get; set; }
	Dictionary<string, AnalysisItem[]>? CatagoryItems { get; set; }
	Dictionary<string, Dictionary<string, double>> PieData = [];
	Dictionary<string, string> NameValues = [];

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrEmpty(Id))
			throw new ArgumentException("Sample ID is required.");

		using var context = DbFactory.CreateDbContext();
		Sample = await context.Samples
		.Include(s => s.FoodCatagory)
		.Include(s => s.AnalysisItems)
		.ThenInclude(ai => ai.AnalysisItemInfo)
		.ThenInclude(aii => aii.AnalysisItemCatagoryInfo)
		.FirstOrDefaultAsync(s => s.Id == Id);

		if (Sample != null)
		{
			CatagoryItems = Sample.AnalysisItems
			.GroupBy(x => x.AnalysisItemInfo.AnalysisItemCatagoryInfo.Name)
			.ToDictionary(g => g.Key, g => g.ToArray());

			PieData = CatagoryItems.ToDictionary(ci => ci.Key, ci =>
			{
				var items = from ai in ci.Value
							let value = ai.GetValueInMg()
							where value.HasValue && value > 0 && !ai.AnalysisItemInfo.Name.Contains("總量")
							select new { ai.AnalysisItemInfo.Name, value.Value };
				var total = items.Sum(x => x.Value);
				if (total == 0)
					return [];
				return items.ToDictionary(x => x.Name, x => Math.Round(x.Value / total * 100, 2));
			});

			NameValues = new()
				{
					["整合編號"] = Sample.Id,
					["樣品名稱"] = Sample.Name,
					["俗名"] = Sample.CommonName ?? string.Empty,
					["英文名稱"] = Sample.EnglishName ?? string.Empty,
					["內容物描述"] = Sample.ContentDescription ?? string.Empty,
					["食品分類"] = Sample.FoodCatagory.Name
				};

			var calories = Sample.GetAnalysisItem("熱量");
			if (calories != null)
				NameValues.Add($"熱量({calories.AnalysisItemInfo.Unit})", $"{calories.Value}");

			var correctedCalories = Sample.GetAnalysisItem("修正熱量");
			if (correctedCalories != null)
				NameValues.Add($"修正熱量({correctedCalories.AnalysisItemInfo.Unit})", $"{correctedCalories.Value}");
		}
	}

	private void GoBack()
	{
		NavigationManager.NavigateTo("/samples/list", forceLoad: true);
	}
}
