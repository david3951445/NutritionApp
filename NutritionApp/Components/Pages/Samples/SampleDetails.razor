@page "/samples/details/{Id}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.FluentUI.AspNetCore.Components
@using SampleDatabaseBuilder.Services
@inject NavigationManager NavigationManager
@inject IDbContextFactory<SamplesContext> DbFactory
@rendermode InteractiveServer

<h1>樣品詳細資料</h1>
<FluentDivider></FluentDivider>

@if (Sample != null)
{
	<div>
		<table class="table table-bordered table-general-info">
			<colgroup>
				<col style="width: 150px;"> <!-- Adjust width of the first column -->
			</colgroup>
			<tbody>
				<tr>
					<th>整合編號</th>
					<td>@Sample.Id</td>
				</tr>
				<tr>
					<th>樣品名稱</th>
					<td>@Sample.Name</td>
				</tr>
				<tr>
					<th>俗名</th>
					<td>@Sample.CommonName</td>
				</tr>
				<tr>
					<th>樣品英文名稱</th>
					<td>@Sample.EnglishName</td>
				</tr>
				<tr>
					<th>內容物描述</th>
					<td>@Sample.ContentDescription</td>
				</tr>
				<tr>
					<th>食品分類</th>
					<td>@Sample.FoodCatagory.Name</td>
				</tr>
				@if (Calories != null)
				{
					<tr>
						<th>熱量(@Calories.AnalysisItemInfo.Unit)</th>
						<td>@Calories.Value</td>
					</tr>
				}
				@if (CorrectedCalories != null)
				{
					<tr>
						<th>修正熱量(@CorrectedCalories.AnalysisItemInfo.Unit)</th>
						<td>@CorrectedCalories.Value</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	@if (CatagoryItems != null)
	{
		<div class="analysis-container">
			@foreach (var pair in CatagoryItems)
			{
				<!-- Display the category title -->
				<h1 style="margin-bottom: 0; padding-bottom: 0;">@pair.Key</h1>
				<FluentDivider></FluentDivider>

				<!-- Display the table for the category -->
				<div class="analysis-item d-flex align-items-start">
					<table class="table table-striped table-sm table-custom">
						<thead>
							<tr>
								<th>分析項名稱</th>
								<th>單位</th>
								<th>每100g含量</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in pair.Value)
							{
								<tr>
									<td>@item.AnalysisItemInfo.Name</td>
									<td>@item.AnalysisItemInfo.Unit</td>
									<td>@item.Value</td>
								</tr>
							}
						</tbody>
					</table>
					@if (PieData[pair.Key].Any())
					{
						<div class="chart-container">
							<PieChart Labels="PieData[pair.Key].Keys.ToList()" Data="PieData[pair.Key].Values.ToList()" />
						</div>
					}
				</div>
			}
		</div>
	}
	else if (IsLoading)
	{
		<p>Loading...</p>
	}
	else
	{
		<p>Sample not found.</p>
	}

	<button @onclick="GoBack">Go Back</button>
}

@code {
	[Parameter] public string? Id { get; set; }

	private Sample? Sample { get; set; }
	private Dictionary<string, AnalysisItem[]>? CatagoryItems { get; set; }
	private bool IsLoading { get; set; } = true;
	private AnalysisItem? Calories;
	private AnalysisItem? CorrectedCalories;
	private List<string> Labels = [];
	private List<double> Data = [];
	Dictionary<string, Dictionary<string, double>> PieData = [];

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrEmpty(Id))
            throw new ArgumentException("Sample ID is required.");

		using var context = DbFactory.CreateDbContext();
		Sample = await context.Samples
		.Include(s => s.FoodCatagory)
		.Include(s => s.AnalysisItems)
		.ThenInclude(ai => ai.AnalysisItemInfo)
		.ThenInclude(aii => aii.AnalysisItemCatagoryInfo)
		.FirstOrDefaultAsync(s => s.Id == Id);

		if (Sample != null)
		{
			Calories = Sample.GetAnalysisItem("熱量");
			CorrectedCalories = Sample.GetAnalysisItem("修正熱量");

			CatagoryItems = Sample.AnalysisItems
			.GroupBy(x => x.AnalysisItemInfo.AnalysisItemCatagoryInfo.Name)
			.ToDictionary(g => g.Key, g => g.ToArray());

			PieData = CatagoryItems.ToDictionary(
			ci => ci.Key,
			ci =>
			{
				var items = from ai in ci.Value
							let value = ai.GetValueInMg()
							where value.HasValue && value > 0 && !ai.AnalysisItemInfo.Name.Contains("總量")
							select new { ai.AnalysisItemInfo.Name, value.Value };
				var total = items.Sum(x => x.Value);
				if (total == 0)
					return [];
				return items.ToDictionary(
	x => x.Name,
	x => Math.Round(x.Value / total * 100, 2));
			});
		}

		IsLoading = false;
	}

	private void GoBack()
	{
		NavigationManager.NavigateTo("/samples/list", forceLoad: true);
	}
}
