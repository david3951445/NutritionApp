//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace SampleDatabaseBuilder.Services
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IFdaNutritionDatabaseClient
    {
        /// <param name="offset">跳過幾筆資料</param>
        /// <param name="limit">每次取得資料筆數</param>
        /// <param name="sort">排序</param>
        /// <returns>成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RowData>> ActivityGetAsync(Method method, InfoId infoId, int? offset, int? limit, Sort? sort, string 食品分類, string 樣品名稱, string 俗名, string 樣品英文名稱, string 分析項分類, string 分析項);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="offset">跳過幾筆資料</param>
        /// <param name="limit">每次取得資料筆數</param>
        /// <param name="sort">排序</param>
        /// <returns>成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RowData>> ActivityGetAsync(Method method, InfoId infoId, int? offset, int? limit, Sort? sort, string 食品分類, string 樣品名稱, string 俗名, string 樣品英文名稱, string 分析項分類, string 分析項, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FdaNutritionDatabaseClient : IFdaNutritionDatabaseClient
    {
        private string _baseUrl = "https://data.fda.gov.tw";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public FdaNutritionDatabaseClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="offset">跳過幾筆資料</param>
        /// <param name="limit">每次取得資料筆數</param>
        /// <param name="sort">排序</param>
        /// <returns>成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RowData>> ActivityGetAsync(Method method, InfoId infoId, int? offset, int? limit, Sort? sort, string 食品分類, string 樣品名稱, string 俗名, string 樣品英文名稱, string 分析項分類, string 分析項)
        {
            return ActivityGetAsync(method, infoId, offset, limit, sort, 食品分類, 樣品名稱, 俗名, 樣品英文名稱, 分析項分類, 分析項, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="offset">跳過幾筆資料</param>
        /// <param name="limit">每次取得資料筆數</param>
        /// <param name="sort">排序</param>
        /// <returns>成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RowData>> ActivityGetAsync(Method method, InfoId infoId, int? offset, int? limit, Sort? sort, string 食品分類, string 樣品名稱, string 俗名, string 樣品英文名稱, string 分析項分類, string 分析項, System.Threading.CancellationToken cancellationToken)
        {
            if (method == null)
                throw new System.ArgumentNullException("method");

            if (infoId == null)
                throw new System.ArgumentNullException("infoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/opendata/exportDataList.do?");
            urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("InfoId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(infoId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (食品分類 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("食品分類") + "=").Append(System.Uri.EscapeDataString(ConvertToString(食品分類, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (樣品名稱 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("樣品名稱") + "=").Append(System.Uri.EscapeDataString(ConvertToString(樣品名稱, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (俗名 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("俗名") + "=").Append(System.Uri.EscapeDataString(ConvertToString(俗名, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (樣品英文名稱 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("樣品英文名稱") + "=").Append(System.Uri.EscapeDataString(ConvertToString(樣品英文名稱, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (分析項分類 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("分析項分類") + "=").Append(System.Uri.EscapeDataString(ConvertToString(分析項分類, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (分析項 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("分析項") + "=").Append(System.Uri.EscapeDataString(ConvertToString(分析項, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RowData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RowData
    {
        /// <summary>
        /// 食品分類
        /// </summary>
        [Newtonsoft.Json.JsonProperty("食品分類", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 食品分類 { get; set; }

        /// <summary>
        /// 資料類別
        /// </summary>
        [Newtonsoft.Json.JsonProperty("資料類別", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 資料類別 { get; set; }

        /// <summary>
        /// 整合編號
        /// </summary>
        [Newtonsoft.Json.JsonProperty("整合編號", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 整合編號 { get; set; }

        /// <summary>
        /// 樣品名稱
        /// </summary>
        [Newtonsoft.Json.JsonProperty("樣品名稱", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 樣品名稱 { get; set; }

        /// <summary>
        /// 俗名
        /// </summary>
        [Newtonsoft.Json.JsonProperty("俗名", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 俗名 { get; set; }

        /// <summary>
        /// 樣品英文名稱
        /// </summary>
        [Newtonsoft.Json.JsonProperty("樣品英文名稱", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 樣品英文名稱 { get; set; }

        /// <summary>
        /// 內容物描述
        /// </summary>
        [Newtonsoft.Json.JsonProperty("內容物描述", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 內容物描述 { get; set; }

        /// <summary>
        /// 廢棄率
        /// </summary>
        [Newtonsoft.Json.JsonProperty("廢棄率", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 廢棄率 { get; set; }

        /// <summary>
        /// 分析項分類
        /// </summary>
        [Newtonsoft.Json.JsonProperty("分析項分類", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 分析項分類 { get; set; }

        /// <summary>
        /// 分析項
        /// </summary>
        [Newtonsoft.Json.JsonProperty("分析項", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 分析項 { get; set; }

        /// <summary>
        /// 含量單位
        /// </summary>
        [Newtonsoft.Json.JsonProperty("含量單位", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 含量單位 { get; set; }

        /// <summary>
        /// 每100克含量
        /// </summary>
        [Newtonsoft.Json.JsonProperty("每100克含量", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 每100克含量 { get; set; }

        /// <summary>
        /// 樣本數
        /// </summary>
        [Newtonsoft.Json.JsonProperty("樣本數", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 樣本數 { get; set; }

        /// <summary>
        /// 標準差
        /// </summary>
        [Newtonsoft.Json.JsonProperty("標準差", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 標準差 { get; set; }

        /// <summary>
        /// 每單位含量
        /// </summary>
        [Newtonsoft.Json.JsonProperty("每單位含量", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 每單位含量 { get; set; }

        /// <summary>
        /// 每單位重
        /// </summary>
        [Newtonsoft.Json.JsonProperty("每單位重", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 每單位重 { get; set; }

        /// <summary>
        /// 每單位重含量
        /// </summary>
        [Newtonsoft.Json.JsonProperty("每單位重含量", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string 每單位重含量 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"openData")]
        OpenData = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum InfoId
    {

        _20 = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Sort
    {

        [System.Runtime.Serialization.EnumMember(Value = @"食品分類")]
        食品分類 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"資料類別")]
        資料類別 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"整合編號")]
        整合編號 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"樣品名稱")]
        樣品名稱 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"俗名")]
        俗名 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"樣品英文名稱")]
        樣品英文名稱 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"內容物描述")]
        內容物描述 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"廢棄率")]
        廢棄率 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"分析項分類")]
        分析項分類 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"分析項")]
        分析項 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"含量單位")]
        含量單位 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"每100克含量")]
        每100克含量 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"樣本數")]
        樣本數 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"標準差")]
        標準差 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"每單位含量")]
        每單位含量 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"每單位重")]
        每單位重 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"每單位重含量")]
        每單位重含量 = 16,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603